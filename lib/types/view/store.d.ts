import MediaDeviceDetection, { type ICameraInfo } from "../core/media-device-detection";
import { type IAudioOutputDeviceInfo, type IMicrophoneInfo } from "../core/use-media-device-detection";
export declare const prefix = "media-device-detection-";
export declare const dialogContainerName = "media-device-detection-dialog";
export declare const panelContainerName = "media-device-detection-panel";
export declare const dialogStyle: string;
export declare const panelStyle: string;
export declare const globalStore: {
    currentIds: {
        camera: string;
        microphone: string;
        audioOutput: string;
    };
    permission: {
        camera: boolean;
        microphone: boolean;
        audioOutput: boolean;
    };
    currentCamera: useTypes.data.Nullable<ICameraInfo>;
    currentCameraStream: useTypes.data.Nullable<MediaStream>;
    currentMicrophone: useTypes.data.Nullable<IMicrophoneInfo>;
    currentAudioOutputDevice: useTypes.data.Nullable<IAudioOutputDeviceInfo>;
    cameraVideoRef: useTypes.data.Nullable<HTMLVideoElement>;
    volumeRef: useTypes.data.Nullable<HTMLElement>;
    audioRef: useTypes.data.Nullable<HTMLAudioElement>;
    audioOutputVisualizationContainer: useTypes.data.Nullable<HTMLDivElement>;
    currentAudioOutputStream: useTypes.data.Nullable<MediaStream>;
    microphoneHasVoice: boolean;
    audioPaused: boolean;
    microphoneList: IMicrophoneInfo[];
    cameraList: ICameraInfo[];
    audioOutputList: IAudioOutputDeviceInfo[];
    mediaDeviceDetection: useTypes.data.Nullable<MediaDeviceDetection>;
    audioOutputDetectionMusic: string;
}, onStoreChange: (properties: "currentIds" | "permission" | "microphoneHasVoice" | "audioPaused" | "audioOutputDetectionMusic" | "currentCamera" | "currentCameraStream" | "currentMicrophone" | "currentAudioOutputDevice" | "cameraVideoRef" | "volumeRef" | "audioRef" | "audioOutputVisualizationContainer" | "currentAudioOutputStream" | "microphoneList" | "cameraList" | "audioOutputList" | "mediaDeviceDetection" | "currentIds.camera" | "currentIds.microphone" | "currentIds.audioOutput" | "permission.camera" | "permission.microphone" | "permission.audioOutput" | "currentCamera.aspectRatio" | "currentCamera.height" | "currentCamera.width" | "currentCamera.InputDeviceInfo" | "currentCamera.extraDeviceId" | "currentCamera.extraLabel" | "currentCamera.deviceId" | "currentCamera.echoCancellation" | "currentCamera.autoGainControl" | "currentCamera.backgroundBlur" | "currentCamera.channelCount" | "currentCamera.displaySurface" | "currentCamera.facingMode" | "currentCamera.frameRate" | "currentCamera.groupId" | "currentCamera.noiseSuppression" | "currentCamera.sampleRate" | "currentCamera.sampleSize" | "currentCamera.aspectRatio.max" | "currentCamera.aspectRatio.min" | "currentCamera.height.max" | "currentCamera.height.min" | "currentCamera.width.max" | "currentCamera.width.min" | "currentCamera.InputDeviceInfo.label" | "currentCamera.InputDeviceInfo.deviceId" | "currentCamera.InputDeviceInfo.groupId" | "currentCamera.InputDeviceInfo.kind" | "currentCamera.InputDeviceInfo.toJSON" | "currentCamera.channelCount.max" | "currentCamera.channelCount.min" | "currentCamera.frameRate.max" | "currentCamera.frameRate.min" | "currentCamera.sampleRate.max" | "currentCamera.sampleRate.min" | "currentCamera.sampleSize.max" | "currentCamera.sampleSize.min" | "currentCameraStream.addEventListener" | "currentCameraStream.removeEventListener" | "currentCameraStream.id" | "currentCameraStream.dispatchEvent" | "currentCameraStream.active" | "currentCameraStream.onaddtrack" | "currentCameraStream.onremovetrack" | "currentCameraStream.addTrack" | "currentCameraStream.clone" | "currentCameraStream.getAudioTracks" | "currentCameraStream.getTrackById" | "currentCameraStream.getTracks" | "currentCameraStream.getVideoTracks" | "currentCameraStream.removeTrack" | "currentMicrophone.label" | "currentMicrophone.extraDeviceId" | "currentMicrophone.extraLabel" | "currentMicrophone.deviceId" | "currentMicrophone.groupId" | "currentMicrophone.kind" | "currentMicrophone.toJSON" | "currentAudioOutputDevice.label" | "currentAudioOutputDevice.extraDeviceId" | "currentAudioOutputDevice.extraLabel" | "currentAudioOutputDevice.deviceId" | "currentAudioOutputDevice.groupId" | "currentAudioOutputDevice.kind" | "currentAudioOutputDevice.toJSON" | "currentAudioOutputStream.addEventListener" | "currentAudioOutputStream.removeEventListener" | "currentAudioOutputStream.id" | "currentAudioOutputStream.dispatchEvent" | "currentAudioOutputStream.active" | "currentAudioOutputStream.onaddtrack" | "currentAudioOutputStream.onremovetrack" | "currentAudioOutputStream.addTrack" | "currentAudioOutputStream.clone" | "currentAudioOutputStream.getAudioTracks" | "currentAudioOutputStream.getTrackById" | "currentAudioOutputStream.getTracks" | "currentAudioOutputStream.getVideoTracks" | "currentAudioOutputStream.removeTrack" | "mediaDeviceDetection.onGetCameraError" | "mediaDeviceDetection.onGetMicrophoneError" | "mediaDeviceDetection.onGetAudioOutputError" | "mediaDeviceDetection.audioContext" | "mediaDeviceDetection.audioWorkletNode" | "mediaDeviceDetection.micStream" | "mediaDeviceDetection.micStreamSource" | "mediaDeviceDetection.watchPermissions" | "mediaDeviceDetection.getCameraList" | "mediaDeviceDetection.getResolution" | "mediaDeviceDetection.getMicrophoneList" | "mediaDeviceDetection.getAudioOutputDeviceList" | "mediaDeviceDetection.testMicrophone" | "mediaDeviceDetection.closeCurrentMicrophone" | "mediaDeviceDetection.releaseMicrophone" | "mediaDeviceDetection.audioContext.addEventListener" | "mediaDeviceDetection.audioContext.removeEventListener" | "mediaDeviceDetection.audioContext.dispatchEvent" | "mediaDeviceDetection.audioContext.close" | "mediaDeviceDetection.audioContext.suspend" | "mediaDeviceDetection.audioContext.sampleRate" | "mediaDeviceDetection.audioContext.baseLatency" | "mediaDeviceDetection.audioContext.outputLatency" | "mediaDeviceDetection.audioContext.createMediaElementSource" | "mediaDeviceDetection.audioContext.createMediaStreamDestination" | "mediaDeviceDetection.audioContext.createMediaStreamSource" | "mediaDeviceDetection.audioContext.getOutputTimestamp" | "mediaDeviceDetection.audioContext.resume" | "mediaDeviceDetection.audioContext.audioWorklet" | "mediaDeviceDetection.audioContext.currentTime" | "mediaDeviceDetection.audioContext.destination" | "mediaDeviceDetection.audioContext.listener" | "mediaDeviceDetection.audioContext.onstatechange" | "mediaDeviceDetection.audioContext.state" | "mediaDeviceDetection.audioContext.createAnalyser" | "mediaDeviceDetection.audioContext.createBiquadFilter" | "mediaDeviceDetection.audioContext.createBuffer" | "mediaDeviceDetection.audioContext.createBufferSource" | "mediaDeviceDetection.audioContext.createChannelMerger" | "mediaDeviceDetection.audioContext.createChannelSplitter" | "mediaDeviceDetection.audioContext.createConstantSource" | "mediaDeviceDetection.audioContext.createConvolver" | "mediaDeviceDetection.audioContext.createDelay" | "mediaDeviceDetection.audioContext.createDynamicsCompressor" | "mediaDeviceDetection.audioContext.createGain" | "mediaDeviceDetection.audioContext.createIIRFilter" | "mediaDeviceDetection.audioContext.createOscillator" | "mediaDeviceDetection.audioContext.createPanner" | "mediaDeviceDetection.audioContext.createPeriodicWave" | "mediaDeviceDetection.audioContext.createScriptProcessor" | "mediaDeviceDetection.audioContext.createStereoPanner" | "mediaDeviceDetection.audioContext.createWaveShaper" | "mediaDeviceDetection.audioContext.decodeAudioData" | "mediaDeviceDetection.audioContext.audioWorklet.addModule" | "mediaDeviceDetection.audioContext.listener.forwardX" | "mediaDeviceDetection.audioContext.listener.forwardY" | "mediaDeviceDetection.audioContext.listener.forwardZ" | "mediaDeviceDetection.audioContext.listener.positionX" | "mediaDeviceDetection.audioContext.listener.positionY" | "mediaDeviceDetection.audioContext.listener.positionZ" | "mediaDeviceDetection.audioContext.listener.upX" | "mediaDeviceDetection.audioContext.listener.upY" | "mediaDeviceDetection.audioContext.listener.upZ" | "mediaDeviceDetection.audioContext.listener.setOrientation" | "mediaDeviceDetection.audioContext.listener.setPosition" | "mediaDeviceDetection.audioContext.listener.forwardX.value" | "mediaDeviceDetection.audioContext.listener.forwardX.automationRate" | "mediaDeviceDetection.audioContext.listener.forwardX.defaultValue" | "mediaDeviceDetection.audioContext.listener.forwardX.maxValue" | "mediaDeviceDetection.audioContext.listener.forwardX.minValue" | "mediaDeviceDetection.audioContext.listener.forwardX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.forwardX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.value" | "mediaDeviceDetection.audioContext.listener.forwardY.automationRate" | "mediaDeviceDetection.audioContext.listener.forwardY.defaultValue" | "mediaDeviceDetection.audioContext.listener.forwardY.maxValue" | "mediaDeviceDetection.audioContext.listener.forwardY.minValue" | "mediaDeviceDetection.audioContext.listener.forwardY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.forwardY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.value" | "mediaDeviceDetection.audioContext.listener.forwardZ.automationRate" | "mediaDeviceDetection.audioContext.listener.forwardZ.defaultValue" | "mediaDeviceDetection.audioContext.listener.forwardZ.maxValue" | "mediaDeviceDetection.audioContext.listener.forwardZ.minValue" | "mediaDeviceDetection.audioContext.listener.forwardZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.forwardZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.value" | "mediaDeviceDetection.audioContext.listener.positionX.automationRate" | "mediaDeviceDetection.audioContext.listener.positionX.defaultValue" | "mediaDeviceDetection.audioContext.listener.positionX.maxValue" | "mediaDeviceDetection.audioContext.listener.positionX.minValue" | "mediaDeviceDetection.audioContext.listener.positionX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.positionX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.value" | "mediaDeviceDetection.audioContext.listener.positionY.automationRate" | "mediaDeviceDetection.audioContext.listener.positionY.defaultValue" | "mediaDeviceDetection.audioContext.listener.positionY.maxValue" | "mediaDeviceDetection.audioContext.listener.positionY.minValue" | "mediaDeviceDetection.audioContext.listener.positionY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.positionY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.value" | "mediaDeviceDetection.audioContext.listener.positionZ.automationRate" | "mediaDeviceDetection.audioContext.listener.positionZ.defaultValue" | "mediaDeviceDetection.audioContext.listener.positionZ.maxValue" | "mediaDeviceDetection.audioContext.listener.positionZ.minValue" | "mediaDeviceDetection.audioContext.listener.positionZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.positionZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.upX.value" | "mediaDeviceDetection.audioContext.listener.upX.automationRate" | "mediaDeviceDetection.audioContext.listener.upX.defaultValue" | "mediaDeviceDetection.audioContext.listener.upX.maxValue" | "mediaDeviceDetection.audioContext.listener.upX.minValue" | "mediaDeviceDetection.audioContext.listener.upX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.upX.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.upX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upX.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upX.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.upX.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.upX.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.upY.value" | "mediaDeviceDetection.audioContext.listener.upY.automationRate" | "mediaDeviceDetection.audioContext.listener.upY.defaultValue" | "mediaDeviceDetection.audioContext.listener.upY.maxValue" | "mediaDeviceDetection.audioContext.listener.upY.minValue" | "mediaDeviceDetection.audioContext.listener.upY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.upY.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.upY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upY.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upY.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.upY.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.upY.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.value" | "mediaDeviceDetection.audioContext.listener.upZ.automationRate" | "mediaDeviceDetection.audioContext.listener.upZ.defaultValue" | "mediaDeviceDetection.audioContext.listener.upZ.maxValue" | "mediaDeviceDetection.audioContext.listener.upZ.minValue" | "mediaDeviceDetection.audioContext.listener.upZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.upZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.addEventListener" | "mediaDeviceDetection.audioWorkletNode.removeEventListener" | "mediaDeviceDetection.audioWorkletNode.dispatchEvent" | "mediaDeviceDetection.audioWorkletNode.channelCount" | "mediaDeviceDetection.audioWorkletNode.onprocessorerror" | "mediaDeviceDetection.audioWorkletNode.parameters" | "mediaDeviceDetection.audioWorkletNode.port" | "mediaDeviceDetection.audioWorkletNode.channelCountMode" | "mediaDeviceDetection.audioWorkletNode.channelInterpretation" | "mediaDeviceDetection.audioWorkletNode.context" | "mediaDeviceDetection.audioWorkletNode.numberOfInputs" | "mediaDeviceDetection.audioWorkletNode.numberOfOutputs" | "mediaDeviceDetection.audioWorkletNode.connect" | "mediaDeviceDetection.audioWorkletNode.disconnect" | "mediaDeviceDetection.audioWorkletNode.parameters.forEach" | "mediaDeviceDetection.audioWorkletNode.port.addEventListener" | "mediaDeviceDetection.audioWorkletNode.port.removeEventListener" | "mediaDeviceDetection.audioWorkletNode.port.dispatchEvent" | "mediaDeviceDetection.audioWorkletNode.port.close" | "mediaDeviceDetection.audioWorkletNode.port.postMessage" | "mediaDeviceDetection.audioWorkletNode.port.start" | "mediaDeviceDetection.audioWorkletNode.port.onmessage" | "mediaDeviceDetection.audioWorkletNode.port.onmessageerror" | "mediaDeviceDetection.audioWorkletNode.context.addEventListener" | "mediaDeviceDetection.audioWorkletNode.context.removeEventListener" | "mediaDeviceDetection.audioWorkletNode.context.dispatchEvent" | "mediaDeviceDetection.audioWorkletNode.context.sampleRate" | "mediaDeviceDetection.audioWorkletNode.context.audioWorklet" | "mediaDeviceDetection.audioWorkletNode.context.currentTime" | "mediaDeviceDetection.audioWorkletNode.context.destination" | "mediaDeviceDetection.audioWorkletNode.context.listener" | "mediaDeviceDetection.audioWorkletNode.context.onstatechange" | "mediaDeviceDetection.audioWorkletNode.context.state" | "mediaDeviceDetection.audioWorkletNode.context.createAnalyser" | "mediaDeviceDetection.audioWorkletNode.context.createBiquadFilter" | "mediaDeviceDetection.audioWorkletNode.context.createBuffer" | "mediaDeviceDetection.audioWorkletNode.context.createBufferSource" | "mediaDeviceDetection.audioWorkletNode.context.createChannelMerger" | "mediaDeviceDetection.audioWorkletNode.context.createChannelSplitter" | "mediaDeviceDetection.audioWorkletNode.context.createConstantSource" | "mediaDeviceDetection.audioWorkletNode.context.createConvolver" | "mediaDeviceDetection.audioWorkletNode.context.createDelay" | "mediaDeviceDetection.audioWorkletNode.context.createDynamicsCompressor" | "mediaDeviceDetection.audioWorkletNode.context.createGain" | "mediaDeviceDetection.audioWorkletNode.context.createIIRFilter" | "mediaDeviceDetection.audioWorkletNode.context.createOscillator" | "mediaDeviceDetection.audioWorkletNode.context.createPanner" | "mediaDeviceDetection.audioWorkletNode.context.createPeriodicWave" | "mediaDeviceDetection.audioWorkletNode.context.createScriptProcessor" | "mediaDeviceDetection.audioWorkletNode.context.createStereoPanner" | "mediaDeviceDetection.audioWorkletNode.context.createWaveShaper" | "mediaDeviceDetection.audioWorkletNode.context.decodeAudioData" | "mediaDeviceDetection.audioWorkletNode.context.audioWorklet.addModule" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ" | "mediaDeviceDetection.audioWorkletNode.context.listener.setOrientation" | "mediaDeviceDetection.audioWorkletNode.context.listener.setPosition" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.setValueCurveAtTime" | "mediaDeviceDetection.micStream.addEventListener" | "mediaDeviceDetection.micStream.removeEventListener" | "mediaDeviceDetection.micStream.id" | "mediaDeviceDetection.micStream.dispatchEvent" | "mediaDeviceDetection.micStream.active" | "mediaDeviceDetection.micStream.onaddtrack" | "mediaDeviceDetection.micStream.onremovetrack" | "mediaDeviceDetection.micStream.addTrack" | "mediaDeviceDetection.micStream.clone" | "mediaDeviceDetection.micStream.getAudioTracks" | "mediaDeviceDetection.micStream.getTrackById" | "mediaDeviceDetection.micStream.getTracks" | "mediaDeviceDetection.micStream.getVideoTracks" | "mediaDeviceDetection.micStream.removeTrack" | "mediaDeviceDetection.micStreamSource.addEventListener" | "mediaDeviceDetection.micStreamSource.removeEventListener" | "mediaDeviceDetection.micStreamSource.dispatchEvent" | "mediaDeviceDetection.micStreamSource.channelCount" | "mediaDeviceDetection.micStreamSource.channelCountMode" | "mediaDeviceDetection.micStreamSource.channelInterpretation" | "mediaDeviceDetection.micStreamSource.context" | "mediaDeviceDetection.micStreamSource.numberOfInputs" | "mediaDeviceDetection.micStreamSource.numberOfOutputs" | "mediaDeviceDetection.micStreamSource.connect" | "mediaDeviceDetection.micStreamSource.disconnect" | "mediaDeviceDetection.micStreamSource.context.addEventListener" | "mediaDeviceDetection.micStreamSource.context.removeEventListener" | "mediaDeviceDetection.micStreamSource.context.dispatchEvent" | "mediaDeviceDetection.micStreamSource.context.sampleRate" | "mediaDeviceDetection.micStreamSource.context.audioWorklet" | "mediaDeviceDetection.micStreamSource.context.currentTime" | "mediaDeviceDetection.micStreamSource.context.destination" | "mediaDeviceDetection.micStreamSource.context.listener" | "mediaDeviceDetection.micStreamSource.context.onstatechange" | "mediaDeviceDetection.micStreamSource.context.state" | "mediaDeviceDetection.micStreamSource.context.createAnalyser" | "mediaDeviceDetection.micStreamSource.context.createBiquadFilter" | "mediaDeviceDetection.micStreamSource.context.createBuffer" | "mediaDeviceDetection.micStreamSource.context.createBufferSource" | "mediaDeviceDetection.micStreamSource.context.createChannelMerger" | "mediaDeviceDetection.micStreamSource.context.createChannelSplitter" | "mediaDeviceDetection.micStreamSource.context.createConstantSource" | "mediaDeviceDetection.micStreamSource.context.createConvolver" | "mediaDeviceDetection.micStreamSource.context.createDelay" | "mediaDeviceDetection.micStreamSource.context.createDynamicsCompressor" | "mediaDeviceDetection.micStreamSource.context.createGain" | "mediaDeviceDetection.micStreamSource.context.createIIRFilter" | "mediaDeviceDetection.micStreamSource.context.createOscillator" | "mediaDeviceDetection.micStreamSource.context.createPanner" | "mediaDeviceDetection.micStreamSource.context.createPeriodicWave" | "mediaDeviceDetection.micStreamSource.context.createScriptProcessor" | "mediaDeviceDetection.micStreamSource.context.createStereoPanner" | "mediaDeviceDetection.micStreamSource.context.createWaveShaper" | "mediaDeviceDetection.micStreamSource.context.decodeAudioData" | "mediaDeviceDetection.micStreamSource.context.audioWorklet.addModule" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ" | "mediaDeviceDetection.micStreamSource.context.listener.positionX" | "mediaDeviceDetection.micStreamSource.context.listener.positionY" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ" | "mediaDeviceDetection.micStreamSource.context.listener.upX" | "mediaDeviceDetection.micStreamSource.context.listener.upY" | "mediaDeviceDetection.micStreamSource.context.listener.upZ" | "mediaDeviceDetection.micStreamSource.context.listener.setOrientation" | "mediaDeviceDetection.micStreamSource.context.listener.setPosition" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.value" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.value" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.value" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.value" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.value" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.value" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.value" | "mediaDeviceDetection.micStreamSource.context.listener.upX.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.upX.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.upX.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.upX.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.upX.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.upX.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.value" | "mediaDeviceDetection.micStreamSource.context.listener.upY.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.upY.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.upY.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.upY.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.upY.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.upY.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.value" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.mediaStream" | "mediaDeviceDetection.micStreamSource.mediaStream.addEventListener" | "mediaDeviceDetection.micStreamSource.mediaStream.removeEventListener" | "mediaDeviceDetection.micStreamSource.mediaStream.id" | "mediaDeviceDetection.micStreamSource.mediaStream.dispatchEvent" | "mediaDeviceDetection.micStreamSource.mediaStream.active" | "mediaDeviceDetection.micStreamSource.mediaStream.onaddtrack" | "mediaDeviceDetection.micStreamSource.mediaStream.onremovetrack" | "mediaDeviceDetection.micStreamSource.mediaStream.addTrack" | "mediaDeviceDetection.micStreamSource.mediaStream.clone" | "mediaDeviceDetection.micStreamSource.mediaStream.getAudioTracks" | "mediaDeviceDetection.micStreamSource.mediaStream.getTrackById" | "mediaDeviceDetection.micStreamSource.mediaStream.getTracks" | "mediaDeviceDetection.micStreamSource.mediaStream.getVideoTracks" | "mediaDeviceDetection.micStreamSource.mediaStream.removeTrack" | ("currentIds" | "permission" | "microphoneHasVoice" | "audioPaused" | "audioOutputDetectionMusic" | "currentCamera" | "currentCameraStream" | "currentMicrophone" | "currentAudioOutputDevice" | "cameraVideoRef" | "volumeRef" | "audioRef" | "audioOutputVisualizationContainer" | "currentAudioOutputStream" | "microphoneList" | "cameraList" | "audioOutputList" | "mediaDeviceDetection" | "currentIds.camera" | "currentIds.microphone" | "currentIds.audioOutput" | "permission.camera" | "permission.microphone" | "permission.audioOutput" | "currentCamera.aspectRatio" | "currentCamera.height" | "currentCamera.width" | "currentCamera.InputDeviceInfo" | "currentCamera.extraDeviceId" | "currentCamera.extraLabel" | "currentCamera.deviceId" | "currentCamera.echoCancellation" | "currentCamera.autoGainControl" | "currentCamera.backgroundBlur" | "currentCamera.channelCount" | "currentCamera.displaySurface" | "currentCamera.facingMode" | "currentCamera.frameRate" | "currentCamera.groupId" | "currentCamera.noiseSuppression" | "currentCamera.sampleRate" | "currentCamera.sampleSize" | "currentCamera.aspectRatio.max" | "currentCamera.aspectRatio.min" | "currentCamera.height.max" | "currentCamera.height.min" | "currentCamera.width.max" | "currentCamera.width.min" | "currentCamera.InputDeviceInfo.label" | "currentCamera.InputDeviceInfo.deviceId" | "currentCamera.InputDeviceInfo.groupId" | "currentCamera.InputDeviceInfo.kind" | "currentCamera.InputDeviceInfo.toJSON" | "currentCamera.channelCount.max" | "currentCamera.channelCount.min" | "currentCamera.frameRate.max" | "currentCamera.frameRate.min" | "currentCamera.sampleRate.max" | "currentCamera.sampleRate.min" | "currentCamera.sampleSize.max" | "currentCamera.sampleSize.min" | "currentCameraStream.addEventListener" | "currentCameraStream.removeEventListener" | "currentCameraStream.id" | "currentCameraStream.dispatchEvent" | "currentCameraStream.active" | "currentCameraStream.onaddtrack" | "currentCameraStream.onremovetrack" | "currentCameraStream.addTrack" | "currentCameraStream.clone" | "currentCameraStream.getAudioTracks" | "currentCameraStream.getTrackById" | "currentCameraStream.getTracks" | "currentCameraStream.getVideoTracks" | "currentCameraStream.removeTrack" | "currentMicrophone.label" | "currentMicrophone.extraDeviceId" | "currentMicrophone.extraLabel" | "currentMicrophone.deviceId" | "currentMicrophone.groupId" | "currentMicrophone.kind" | "currentMicrophone.toJSON" | "currentAudioOutputDevice.label" | "currentAudioOutputDevice.extraDeviceId" | "currentAudioOutputDevice.extraLabel" | "currentAudioOutputDevice.deviceId" | "currentAudioOutputDevice.groupId" | "currentAudioOutputDevice.kind" | "currentAudioOutputDevice.toJSON" | "currentAudioOutputStream.addEventListener" | "currentAudioOutputStream.removeEventListener" | "currentAudioOutputStream.id" | "currentAudioOutputStream.dispatchEvent" | "currentAudioOutputStream.active" | "currentAudioOutputStream.onaddtrack" | "currentAudioOutputStream.onremovetrack" | "currentAudioOutputStream.addTrack" | "currentAudioOutputStream.clone" | "currentAudioOutputStream.getAudioTracks" | "currentAudioOutputStream.getTrackById" | "currentAudioOutputStream.getTracks" | "currentAudioOutputStream.getVideoTracks" | "currentAudioOutputStream.removeTrack" | "mediaDeviceDetection.onGetCameraError" | "mediaDeviceDetection.onGetMicrophoneError" | "mediaDeviceDetection.onGetAudioOutputError" | "mediaDeviceDetection.audioContext" | "mediaDeviceDetection.audioWorkletNode" | "mediaDeviceDetection.micStream" | "mediaDeviceDetection.micStreamSource" | "mediaDeviceDetection.watchPermissions" | "mediaDeviceDetection.getCameraList" | "mediaDeviceDetection.getResolution" | "mediaDeviceDetection.getMicrophoneList" | "mediaDeviceDetection.getAudioOutputDeviceList" | "mediaDeviceDetection.testMicrophone" | "mediaDeviceDetection.closeCurrentMicrophone" | "mediaDeviceDetection.releaseMicrophone" | "mediaDeviceDetection.audioContext.addEventListener" | "mediaDeviceDetection.audioContext.removeEventListener" | "mediaDeviceDetection.audioContext.dispatchEvent" | "mediaDeviceDetection.audioContext.close" | "mediaDeviceDetection.audioContext.suspend" | "mediaDeviceDetection.audioContext.sampleRate" | "mediaDeviceDetection.audioContext.baseLatency" | "mediaDeviceDetection.audioContext.outputLatency" | "mediaDeviceDetection.audioContext.createMediaElementSource" | "mediaDeviceDetection.audioContext.createMediaStreamDestination" | "mediaDeviceDetection.audioContext.createMediaStreamSource" | "mediaDeviceDetection.audioContext.getOutputTimestamp" | "mediaDeviceDetection.audioContext.resume" | "mediaDeviceDetection.audioContext.audioWorklet" | "mediaDeviceDetection.audioContext.currentTime" | "mediaDeviceDetection.audioContext.destination" | "mediaDeviceDetection.audioContext.listener" | "mediaDeviceDetection.audioContext.onstatechange" | "mediaDeviceDetection.audioContext.state" | "mediaDeviceDetection.audioContext.createAnalyser" | "mediaDeviceDetection.audioContext.createBiquadFilter" | "mediaDeviceDetection.audioContext.createBuffer" | "mediaDeviceDetection.audioContext.createBufferSource" | "mediaDeviceDetection.audioContext.createChannelMerger" | "mediaDeviceDetection.audioContext.createChannelSplitter" | "mediaDeviceDetection.audioContext.createConstantSource" | "mediaDeviceDetection.audioContext.createConvolver" | "mediaDeviceDetection.audioContext.createDelay" | "mediaDeviceDetection.audioContext.createDynamicsCompressor" | "mediaDeviceDetection.audioContext.createGain" | "mediaDeviceDetection.audioContext.createIIRFilter" | "mediaDeviceDetection.audioContext.createOscillator" | "mediaDeviceDetection.audioContext.createPanner" | "mediaDeviceDetection.audioContext.createPeriodicWave" | "mediaDeviceDetection.audioContext.createScriptProcessor" | "mediaDeviceDetection.audioContext.createStereoPanner" | "mediaDeviceDetection.audioContext.createWaveShaper" | "mediaDeviceDetection.audioContext.decodeAudioData" | "mediaDeviceDetection.audioContext.audioWorklet.addModule" | "mediaDeviceDetection.audioContext.listener.forwardX" | "mediaDeviceDetection.audioContext.listener.forwardY" | "mediaDeviceDetection.audioContext.listener.forwardZ" | "mediaDeviceDetection.audioContext.listener.positionX" | "mediaDeviceDetection.audioContext.listener.positionY" | "mediaDeviceDetection.audioContext.listener.positionZ" | "mediaDeviceDetection.audioContext.listener.upX" | "mediaDeviceDetection.audioContext.listener.upY" | "mediaDeviceDetection.audioContext.listener.upZ" | "mediaDeviceDetection.audioContext.listener.setOrientation" | "mediaDeviceDetection.audioContext.listener.setPosition" | "mediaDeviceDetection.audioContext.listener.forwardX.value" | "mediaDeviceDetection.audioContext.listener.forwardX.automationRate" | "mediaDeviceDetection.audioContext.listener.forwardX.defaultValue" | "mediaDeviceDetection.audioContext.listener.forwardX.maxValue" | "mediaDeviceDetection.audioContext.listener.forwardX.minValue" | "mediaDeviceDetection.audioContext.listener.forwardX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.forwardX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardX.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.value" | "mediaDeviceDetection.audioContext.listener.forwardY.automationRate" | "mediaDeviceDetection.audioContext.listener.forwardY.defaultValue" | "mediaDeviceDetection.audioContext.listener.forwardY.maxValue" | "mediaDeviceDetection.audioContext.listener.forwardY.minValue" | "mediaDeviceDetection.audioContext.listener.forwardY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.forwardY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardY.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.value" | "mediaDeviceDetection.audioContext.listener.forwardZ.automationRate" | "mediaDeviceDetection.audioContext.listener.forwardZ.defaultValue" | "mediaDeviceDetection.audioContext.listener.forwardZ.maxValue" | "mediaDeviceDetection.audioContext.listener.forwardZ.minValue" | "mediaDeviceDetection.audioContext.listener.forwardZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.forwardZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.forwardZ.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.value" | "mediaDeviceDetection.audioContext.listener.positionX.automationRate" | "mediaDeviceDetection.audioContext.listener.positionX.defaultValue" | "mediaDeviceDetection.audioContext.listener.positionX.maxValue" | "mediaDeviceDetection.audioContext.listener.positionX.minValue" | "mediaDeviceDetection.audioContext.listener.positionX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.positionX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionX.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.value" | "mediaDeviceDetection.audioContext.listener.positionY.automationRate" | "mediaDeviceDetection.audioContext.listener.positionY.defaultValue" | "mediaDeviceDetection.audioContext.listener.positionY.maxValue" | "mediaDeviceDetection.audioContext.listener.positionY.minValue" | "mediaDeviceDetection.audioContext.listener.positionY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.positionY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionY.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.value" | "mediaDeviceDetection.audioContext.listener.positionZ.automationRate" | "mediaDeviceDetection.audioContext.listener.positionZ.defaultValue" | "mediaDeviceDetection.audioContext.listener.positionZ.maxValue" | "mediaDeviceDetection.audioContext.listener.positionZ.minValue" | "mediaDeviceDetection.audioContext.listener.positionZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.positionZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.positionZ.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.upX.value" | "mediaDeviceDetection.audioContext.listener.upX.automationRate" | "mediaDeviceDetection.audioContext.listener.upX.defaultValue" | "mediaDeviceDetection.audioContext.listener.upX.maxValue" | "mediaDeviceDetection.audioContext.listener.upX.minValue" | "mediaDeviceDetection.audioContext.listener.upX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.upX.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.upX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upX.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upX.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.upX.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.upX.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.upY.value" | "mediaDeviceDetection.audioContext.listener.upY.automationRate" | "mediaDeviceDetection.audioContext.listener.upY.defaultValue" | "mediaDeviceDetection.audioContext.listener.upY.maxValue" | "mediaDeviceDetection.audioContext.listener.upY.minValue" | "mediaDeviceDetection.audioContext.listener.upY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.upY.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.upY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upY.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upY.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.upY.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.upY.setValueCurveAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.value" | "mediaDeviceDetection.audioContext.listener.upZ.automationRate" | "mediaDeviceDetection.audioContext.listener.upZ.defaultValue" | "mediaDeviceDetection.audioContext.listener.upZ.maxValue" | "mediaDeviceDetection.audioContext.listener.upZ.minValue" | "mediaDeviceDetection.audioContext.listener.upZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.cancelScheduledValues" | "mediaDeviceDetection.audioContext.listener.upZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.setTargetAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.setValueAtTime" | "mediaDeviceDetection.audioContext.listener.upZ.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.addEventListener" | "mediaDeviceDetection.audioWorkletNode.removeEventListener" | "mediaDeviceDetection.audioWorkletNode.dispatchEvent" | "mediaDeviceDetection.audioWorkletNode.channelCount" | "mediaDeviceDetection.audioWorkletNode.onprocessorerror" | "mediaDeviceDetection.audioWorkletNode.parameters" | "mediaDeviceDetection.audioWorkletNode.port" | "mediaDeviceDetection.audioWorkletNode.channelCountMode" | "mediaDeviceDetection.audioWorkletNode.channelInterpretation" | "mediaDeviceDetection.audioWorkletNode.context" | "mediaDeviceDetection.audioWorkletNode.numberOfInputs" | "mediaDeviceDetection.audioWorkletNode.numberOfOutputs" | "mediaDeviceDetection.audioWorkletNode.connect" | "mediaDeviceDetection.audioWorkletNode.disconnect" | "mediaDeviceDetection.audioWorkletNode.parameters.forEach" | "mediaDeviceDetection.audioWorkletNode.port.addEventListener" | "mediaDeviceDetection.audioWorkletNode.port.removeEventListener" | "mediaDeviceDetection.audioWorkletNode.port.dispatchEvent" | "mediaDeviceDetection.audioWorkletNode.port.close" | "mediaDeviceDetection.audioWorkletNode.port.postMessage" | "mediaDeviceDetection.audioWorkletNode.port.start" | "mediaDeviceDetection.audioWorkletNode.port.onmessage" | "mediaDeviceDetection.audioWorkletNode.port.onmessageerror" | "mediaDeviceDetection.audioWorkletNode.context.addEventListener" | "mediaDeviceDetection.audioWorkletNode.context.removeEventListener" | "mediaDeviceDetection.audioWorkletNode.context.dispatchEvent" | "mediaDeviceDetection.audioWorkletNode.context.sampleRate" | "mediaDeviceDetection.audioWorkletNode.context.audioWorklet" | "mediaDeviceDetection.audioWorkletNode.context.currentTime" | "mediaDeviceDetection.audioWorkletNode.context.destination" | "mediaDeviceDetection.audioWorkletNode.context.listener" | "mediaDeviceDetection.audioWorkletNode.context.onstatechange" | "mediaDeviceDetection.audioWorkletNode.context.state" | "mediaDeviceDetection.audioWorkletNode.context.createAnalyser" | "mediaDeviceDetection.audioWorkletNode.context.createBiquadFilter" | "mediaDeviceDetection.audioWorkletNode.context.createBuffer" | "mediaDeviceDetection.audioWorkletNode.context.createBufferSource" | "mediaDeviceDetection.audioWorkletNode.context.createChannelMerger" | "mediaDeviceDetection.audioWorkletNode.context.createChannelSplitter" | "mediaDeviceDetection.audioWorkletNode.context.createConstantSource" | "mediaDeviceDetection.audioWorkletNode.context.createConvolver" | "mediaDeviceDetection.audioWorkletNode.context.createDelay" | "mediaDeviceDetection.audioWorkletNode.context.createDynamicsCompressor" | "mediaDeviceDetection.audioWorkletNode.context.createGain" | "mediaDeviceDetection.audioWorkletNode.context.createIIRFilter" | "mediaDeviceDetection.audioWorkletNode.context.createOscillator" | "mediaDeviceDetection.audioWorkletNode.context.createPanner" | "mediaDeviceDetection.audioWorkletNode.context.createPeriodicWave" | "mediaDeviceDetection.audioWorkletNode.context.createScriptProcessor" | "mediaDeviceDetection.audioWorkletNode.context.createStereoPanner" | "mediaDeviceDetection.audioWorkletNode.context.createWaveShaper" | "mediaDeviceDetection.audioWorkletNode.context.decodeAudioData" | "mediaDeviceDetection.audioWorkletNode.context.audioWorklet.addModule" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ" | "mediaDeviceDetection.audioWorkletNode.context.listener.setOrientation" | "mediaDeviceDetection.audioWorkletNode.context.listener.setPosition" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardX.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardY.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.forwardZ.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionX.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionY.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.positionZ.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upX.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upY.setValueCurveAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.value" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.automationRate" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.defaultValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.maxValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.minValue" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.cancelAndHoldAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.cancelScheduledValues" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.linearRampToValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.setTargetAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.setValueAtTime" | "mediaDeviceDetection.audioWorkletNode.context.listener.upZ.setValueCurveAtTime" | "mediaDeviceDetection.micStream.addEventListener" | "mediaDeviceDetection.micStream.removeEventListener" | "mediaDeviceDetection.micStream.id" | "mediaDeviceDetection.micStream.dispatchEvent" | "mediaDeviceDetection.micStream.active" | "mediaDeviceDetection.micStream.onaddtrack" | "mediaDeviceDetection.micStream.onremovetrack" | "mediaDeviceDetection.micStream.addTrack" | "mediaDeviceDetection.micStream.clone" | "mediaDeviceDetection.micStream.getAudioTracks" | "mediaDeviceDetection.micStream.getTrackById" | "mediaDeviceDetection.micStream.getTracks" | "mediaDeviceDetection.micStream.getVideoTracks" | "mediaDeviceDetection.micStream.removeTrack" | "mediaDeviceDetection.micStreamSource.addEventListener" | "mediaDeviceDetection.micStreamSource.removeEventListener" | "mediaDeviceDetection.micStreamSource.dispatchEvent" | "mediaDeviceDetection.micStreamSource.channelCount" | "mediaDeviceDetection.micStreamSource.channelCountMode" | "mediaDeviceDetection.micStreamSource.channelInterpretation" | "mediaDeviceDetection.micStreamSource.context" | "mediaDeviceDetection.micStreamSource.numberOfInputs" | "mediaDeviceDetection.micStreamSource.numberOfOutputs" | "mediaDeviceDetection.micStreamSource.connect" | "mediaDeviceDetection.micStreamSource.disconnect" | "mediaDeviceDetection.micStreamSource.context.addEventListener" | "mediaDeviceDetection.micStreamSource.context.removeEventListener" | "mediaDeviceDetection.micStreamSource.context.dispatchEvent" | "mediaDeviceDetection.micStreamSource.context.sampleRate" | "mediaDeviceDetection.micStreamSource.context.audioWorklet" | "mediaDeviceDetection.micStreamSource.context.currentTime" | "mediaDeviceDetection.micStreamSource.context.destination" | "mediaDeviceDetection.micStreamSource.context.listener" | "mediaDeviceDetection.micStreamSource.context.onstatechange" | "mediaDeviceDetection.micStreamSource.context.state" | "mediaDeviceDetection.micStreamSource.context.createAnalyser" | "mediaDeviceDetection.micStreamSource.context.createBiquadFilter" | "mediaDeviceDetection.micStreamSource.context.createBuffer" | "mediaDeviceDetection.micStreamSource.context.createBufferSource" | "mediaDeviceDetection.micStreamSource.context.createChannelMerger" | "mediaDeviceDetection.micStreamSource.context.createChannelSplitter" | "mediaDeviceDetection.micStreamSource.context.createConstantSource" | "mediaDeviceDetection.micStreamSource.context.createConvolver" | "mediaDeviceDetection.micStreamSource.context.createDelay" | "mediaDeviceDetection.micStreamSource.context.createDynamicsCompressor" | "mediaDeviceDetection.micStreamSource.context.createGain" | "mediaDeviceDetection.micStreamSource.context.createIIRFilter" | "mediaDeviceDetection.micStreamSource.context.createOscillator" | "mediaDeviceDetection.micStreamSource.context.createPanner" | "mediaDeviceDetection.micStreamSource.context.createPeriodicWave" | "mediaDeviceDetection.micStreamSource.context.createScriptProcessor" | "mediaDeviceDetection.micStreamSource.context.createStereoPanner" | "mediaDeviceDetection.micStreamSource.context.createWaveShaper" | "mediaDeviceDetection.micStreamSource.context.decodeAudioData" | "mediaDeviceDetection.micStreamSource.context.audioWorklet.addModule" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ" | "mediaDeviceDetection.micStreamSource.context.listener.positionX" | "mediaDeviceDetection.micStreamSource.context.listener.positionY" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ" | "mediaDeviceDetection.micStreamSource.context.listener.upX" | "mediaDeviceDetection.micStreamSource.context.listener.upY" | "mediaDeviceDetection.micStreamSource.context.listener.upZ" | "mediaDeviceDetection.micStreamSource.context.listener.setOrientation" | "mediaDeviceDetection.micStreamSource.context.listener.setPosition" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.value" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardX.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.value" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardY.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.value" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.forwardZ.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.value" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionX.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.value" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionY.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.value" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.positionZ.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.value" | "mediaDeviceDetection.micStreamSource.context.listener.upX.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.upX.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.upX.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.upX.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.upX.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.upX.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upX.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.value" | "mediaDeviceDetection.micStreamSource.context.listener.upY.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.upY.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.upY.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.upY.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.upY.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.upY.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upY.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.value" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.automationRate" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.defaultValue" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.maxValue" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.minValue" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.cancelAndHoldAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.cancelScheduledValues" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.exponentialRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.linearRampToValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.setTargetAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.setValueAtTime" | "mediaDeviceDetection.micStreamSource.context.listener.upZ.setValueCurveAtTime" | "mediaDeviceDetection.micStreamSource.mediaStream" | "mediaDeviceDetection.micStreamSource.mediaStream.addEventListener" | "mediaDeviceDetection.micStreamSource.mediaStream.removeEventListener" | "mediaDeviceDetection.micStreamSource.mediaStream.id" | "mediaDeviceDetection.micStreamSource.mediaStream.dispatchEvent" | "mediaDeviceDetection.micStreamSource.mediaStream.active" | "mediaDeviceDetection.micStreamSource.mediaStream.onaddtrack" | "mediaDeviceDetection.micStreamSource.mediaStream.onremovetrack" | "mediaDeviceDetection.micStreamSource.mediaStream.addTrack" | "mediaDeviceDetection.micStreamSource.mediaStream.clone" | "mediaDeviceDetection.micStreamSource.mediaStream.getAudioTracks" | "mediaDeviceDetection.micStreamSource.mediaStream.getTrackById" | "mediaDeviceDetection.micStreamSource.mediaStream.getTracks" | "mediaDeviceDetection.micStreamSource.mediaStream.getVideoTracks" | "mediaDeviceDetection.micStreamSource.mediaStream.removeTrack")[], callback: ((newValue: unknown, oldValue: unknown, newObject: {
    currentIds: {
        camera: string;
        microphone: string;
        audioOutput: string;
    };
    permission: {
        camera: boolean;
        microphone: boolean;
        audioOutput: boolean;
    };
    currentCamera: useTypes.data.Nullable<ICameraInfo>;
    currentCameraStream: useTypes.data.Nullable<MediaStream>;
    currentMicrophone: useTypes.data.Nullable<IMicrophoneInfo>;
    currentAudioOutputDevice: useTypes.data.Nullable<IAudioOutputDeviceInfo>;
    cameraVideoRef: useTypes.data.Nullable<HTMLVideoElement>;
    volumeRef: useTypes.data.Nullable<HTMLElement>;
    audioRef: useTypes.data.Nullable<HTMLAudioElement>;
    audioOutputVisualizationContainer: useTypes.data.Nullable<HTMLDivElement>;
    currentAudioOutputStream: useTypes.data.Nullable<MediaStream>;
    microphoneHasVoice: boolean;
    audioPaused: boolean;
    microphoneList: IMicrophoneInfo[];
    cameraList: ICameraInfo[];
    audioOutputList: IAudioOutputDeviceInfo[];
    mediaDeviceDetection: useTypes.data.Nullable<MediaDeviceDetection>;
    audioOutputDetectionMusic: string;
}, changedProperty: string | symbol) => void | Promise<void>) & {
    watchProperties?: (string | symbol)[];
}, once?: boolean) => void, cleanStoreEvent: () => void;
export declare const methodsStore: {
    release: () => void;
    releaseStream: (stream?: MediaStream) => void;
};
export type TGlobalStore = typeof globalStore;
